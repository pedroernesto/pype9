/* This file was generated by PyPe9 version {{version}} on {{timestamp}} */

#include "{{component_name}}module.h"

// Model include
#include "{{component_name}}.h"

// Generated include
#include "config.h"

// Includes from nestkernel:
#include "connection_manager_impl.h"
#include "connector_model_impl.h"
#include "dynamicloader.h"
#include "exceptions.h"
#include "genericmodel.h"
#include "genericmodel_impl.h"
#include "kernel_manager.h"
#include "model.h"
#include "model_manager_impl.h"
#include "nest.h"
#include "nest_impl.h"
#include "nestmodule.h"
#include "target_identifier.h"

// Includes from sli:
#include "booldatum.h"
#include "integerdatum.h"
#include "sliexceptions.h"
#include "tokenarray.h"


// -- Interface to dynamic module loader ---------------------------------------

/*
 * The dynamic module loader must be able to find your module.
 * You make the module known to the loader by defining an instance of your
 * module class in global scope. This instance must have the name
 *
 * <modulename>_LTX_mod
 *
 * The dynamicloader can then load modulename and search for symbol "mod" in it.
 */

#if defined( LTX_MODULE ) | defined( LINKED_MODULE )
mynest::{{component_name}}Module {{component_name}}module_LTX_mod;
#endif

// -- DynModule functions ------------------------------------------------------

mynest::{{component_name}}Module::{{component_name}}Module() {
#ifdef LINKED_MODULE
     // register this module at the dynamic loader
     // this is needed to allow for linking in this module at compile time
     // all registered modules will be initialized by the main app's dynamic loader
     nest::DynamicLoaderModule::registerLinkedModule(this);
#endif
}

mynest::{{component_name}}Module::~{{component_name}}Module()
{
}

const std::string
mynest::{{component_name}}Module::name(void) const {
    return std::string("PyPe9-generated module for {{component_name}} class"); // Return name of the module
}

const std::string
mynest::{{component_name}}Module::commandstring(void) const {
 /* 1. Tell interpreter that we provide the C++ part of {{component_name}}Module with the
       current revision number.
    2. Instruct the interpreter to check that {{component_name}}Module.sli exists,
       provides at least version 1.0 of the SLI interface to {{component_name}}Module, and
       to load it.
  */
    return std::string("({{component_name}}module-init) run");
}

//-------------------------------------------------------------------------------------

void mynest::{{component_name}}Module::init( SLIInterpreter* i )
{
  /* Register a neuron or device model.
     Give node type as template argument and the name as second argument.
  */
  // nest::kernel().model_manager.register_node_model< pif_psc_alpha >( "pif_psc_alpha" );

  /* Register a synapse type.
     Give synapse type as template argument and the name as second argument.

     There are two choices for the template argument:
         - nest::TargetIdentifierPtrRport
         - nest::TargetIdentifierIndex
     The first is the standard and you should usually stick to it.
     nest::TargetIdentifierIndex reduces the memory requirement of synapses
     even further, but limits the number of available rports. Please see
     Kunkel et al, Front Neurofinfom 8:78 (2014), Sec 3.3.2, for details.
  */
  nest::register_connection_model< nest::STDPConnection_StdpSongAbbott >( "StdpSongAbbott",  nest::default_connection_model_flags);

  // Register connection rule.
  // nest::kernel().connection_manager.register_conn_builder< StepPatternBuilder >( "step_pattern" );

}  // {{component_name}}Module::init()
