/* This file was generated by PyPe9 version {{version}} on {{timestamp}} */

/*
 *  stdp_connection_{{component_name}}.h
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef STDP_CONNECTION_{{component_name | upper}}_H
#define STDP_CONNECTION_{{component_name | upper}}_H

/* BeginDocumentation
  Name: stdp_synapse - Synapse type for spike-timing dependent
   plasticity.

  Description:
   stdp_synapse is a connector to create synapses with spike time
   dependent plasticity (as defined in [1]). Here the weight dependence
   exponent can be set separately for potentiation and depression.

  Parameters:
   {#
   tau_plus   double - Time constant of STDP window, potentiation in ms
                       (tau_minus defined in post-synaptic neuron)
   Wmax       double - Maximum allowed weight
   #}
   {% for par in component_class.parameters %}
      {% if 'LTD' not in par.name %}
        {{par.name}}
      {% endif %}
   {% endfor %}

  Transmits: SpikeEvent

  References:
   [1] Song, S., Miller, K. D. and Abbott, L. F. (2000). Competitive
       Hebbian learning through spike-timing-dependent synaptic
       plasticity,Nature Neuroscience 3:9,919--926

       First Version of Jinja template: March 2020
       Author: Pedro Garcia-Rodriguez, ICN, CNRS, France
*/

// C++ includes:
#include <cmath>

// Includes from nestkernel:
#include "common_synapse_properties.h"
#include "connection.h"
#include "connector_model.h"
#include "event.h"

// Includes from sli:
#include "dictdatum.h"
#include "dictutils.h"


namespace nest
{

// connections are templates of target identifier type (used for pointer /
// target index addressing) derived from generic connection template
template < typename targetidentifierT >
class STDPConnection_{{component_name}} : public Connection< targetidentifierT >
{

public:
  typedef CommonSynapseProperties CommonPropertiesType;
  typedef Connection< targetidentifierT > ConnectionBase;

  /**
   * Default Constructor.
   * Sets default values for all parameters. Needed by GenericConnectorModel.
   */
  STDPConnection_{{component_name}}();


  /**
   * Copy constructor.
   * Needs to be defined properly in order for GenericConnector to work.
   */
  STDPConnection_{{component_name}}( const STDPConnection_{{component_name}}& );

  // Explicitly declare all methods inherited from the dependent base
  // ConnectionBase. This avoids explicit name prefixes in all places these
  // functions are used. Since ConnectionBase depends on the template parameter,
  // they are not automatically found in the base class.
  using ConnectionBase::get_delay_steps;
  using ConnectionBase::get_delay;
  using ConnectionBase::get_rport;
  using ConnectionBase::get_target;

  /**
   * Get all properties of this connection and put them into a dictionary.
   */
  void get_status( DictionaryDatum& d ) const;

  /**
   * Set properties of this connection from the values given in dictionary.
   */
  void set_status( const DictionaryDatum& d, ConnectorModel& cm );

  /**
   * Send an event to the receiver of this connection.
   * \param e The event to send
   * \param cp common properties of all synapses (empty).
   */
  void send( Event& e, thread t, const CommonSynapseProperties& cp );


  class ConnTestDummyNode : public ConnTestDummyNodeBase
  {
  public:
    // Ensure proper overriding of overloaded virtual functions.
    // Return values from functions are ignored.
    using ConnTestDummyNodeBase::handles_test_event;
    port
    handles_test_event( SpikeEvent&, rport )
    {
      return invalid_port_;
    }
  };

  void
  check_connection( Node& s,
    Node& t,
    rport receptor_type,
    const CommonPropertiesType& )
  {
    ConnTestDummyNode dummy_target;

    ConnectionBase::check_connection_( dummy_target, s, t, receptor_type );

    t.register_stdp_connection( t_lastspike_ - get_delay() );
  }

  void
  set_weight( double w )
  {
    {# wsyn_ = w; #}
    {% for as_port_name in component_class.analog_send_port_names %}
    {{as_port_name}}_ = w;
    {% endfor %}
  }

private:
  {% set regime = component_class.regime('sole') %}
  double
  facilitate_( double {{component_class.state_variable('wsyn').name}},
              double {{component_class.state_variable('P').name}} )
  {
    {#
    double norm_w = ( w / Wmax_ )
      + ( lambda_ * std::pow( 1.0 - ( w / Wmax_ ), mu_plus_ ) * kplus );
    #}
    {% set on_event = regime.on_event('presynaptic_spike') %}
    double {{on_event.state_assignment('deltaw').lhs}} =
      {{on_event.state_assignment('deltaw').rhs}};
    double {{on_event.state_assignment('wsyn').lhs}} =
      {{on_event.state_assignment('wsyn').rhs}};

    {# return norm_w < 1.0 ? norm_w * Wmax_ : Wmax_; #}
    {% for on_cond in regime.on_conditions %}
      {% if 'max' in on_cond.key | string %}
        {% for state_assig in on_cond.state_assignments %}
    return {{on_cond.key}} ? {{state_assig.rhs}} : {{state_assig.lhs}};
        {% endfor %}
      {% endif%}
    {% endfor %}
  }

  double
  depress_( double {{component_class.state_variable('wsyn').name}},
            double {{component_class.state_variable('M').name}} )
  {
    {#
    double norm_w = ( w / Wmax_ )
      - ( alpha_ * lambda_ * std::pow( w / Wmax_, mu_minus_ ) * kminus );
    #}
    {% set on_event = regime.on_event('postsynaptic_spike') %}
    double {{on_event.state_assignment('deltaw').lhs}} =
      {{component_class.state_variable('M').name}};
    double {{on_event.state_assignment('wsyn').lhs}} =
      {{on_event.state_assignment('wsyn').rhs}};

    {# return norm_w > 0.0 ? norm_w * Wmax_ : 0.0; #}
    {% for on_cond in regime.on_conditions %}
      {% if 'min' in on_cond.key | string %}
        {% for state_assig in on_cond.state_assignments %}
    return {{on_cond.key}} ? {{state_assig.rhs}} : {{state_assig.lhs}};
        {% endfor %}
      {% endif%}
    {% endfor %}
  }

  // data members of each connection
  {#
  double weight_;
  double tau_plus_;
  double Wmax_;
  double Kplus_;
  double t_lastspike_;
  #}
  {% for par in component_class.parameters %}
     {% if 'LTD' not in par.name %}
  double {{par.name}}_
     {% endif %}
  {% endfor %}
  {% for state_var in component_class.state_variables %}
     {% if 'M' not in state_var.name %}
  double {{state_var.name}}_;
    {% endif %}
  {% endfor %}
};

/**
 * Send an event to the receiver of this connection.
 * \param e The event to send
 * \param t The thread on which this connection is stored.
 * \param cp Common properties object, containing the stdp parameters.
 */
template < typename targetidentifierT >
inline void
STDPConnection_{{component_name}}< targetidentifierT >::send( Event& e,
 thread t,
 const CommonSynapseProperties& )
{
  // synapse STDP depressing/facilitation dynamics
  {# double t_spike = e.get_stamp().get_ms(); #}
  double {{component_class.state_variable('tlast_pre').name}} = e.get_stamp().get_ms();

  // use accessor functions (inherited from Connection< >) to obtain delay and
  // target
  Node* target = get_target( t );
  double dendritic_delay = get_delay();

  // get spike history in relevant range (t1, t2] from post-synaptic neuron
  std::deque< histentry >::iterator start;
  std::deque< histentry >::iterator finish;

  // For a new synapse, t_lastspike_ contains the point in time of the last
  // spike. So we initially read the
  // history(t_last_spike - dendritic_delay, ..., t_spike-dendritic_delay]
  // which increases the access counter for these entries.
  // At registration, all entries' access counters of
  // history[0, ..., t_last_spike - dendritic_delay] have been
  // incremented by Archiving_Node::register_stdp_connection(). See bug #218 for
  // details.
  {#
  target->get_history( t_lastspike_ - dendritic_delay,
   t_spike - dendritic_delay,
   &start,
   &finish );
  #}
  target->get_history( {{component_class.state_variable('tlast_post').name}}_ - dendritic_delay,
   {{component_class.state_variable('tlast_pre').name}} - dendritic_delay,
   &start,
   &finish );

  // facilitation due to post-synaptic spikes since last pre-synaptic spike
  double minus_dt;
  while ( start != finish )
  {
   {# minus_dt = t_lastspike_ - ( start->t_ + dendritic_delay ); #}
   minus_dt = - ( start->t_ -
     ({{component_class.state_variable('tlast_post').name}}_ - dendritic_delay) );

   ++start;
   // get_history() should make sure that
   // start->t_ > t_lastspike - dendritic_delay, i.e. minus_dt < 0
   assert( minus_dt < -1.0 * kernel().connection_manager.get_stdp_eps() );
   {# wsyn_ = facilitate_( wsyn_, Kplus_ * std::exp( minus_dt / tau_plus_ ) ); #}
   {{component_class.state_variable('wsyn').name}}_ =
    facilitate_( {{component_class.state_variable('wsyn').name}}_,
                  {{component_class.state_variable('P').name}}_ * std::exp( minus_dt /
                    {{component_class.parameter('tauLTP').name}}_ ) );
  }

  // depression due to new pre-synaptic spike
  {#
  wsyn_ = depress_( wsyn_, target->get_K_value( t_spike - dendritic_delay ) );
  #}
  {{component_class.state_variable('wsyn').name}}_ =
   depress_( {{component_class.state_variable('wsyn').name}}_,
   target->get_K_value( {{component_class.state_variable('tlast_pre').name}}
                        - dendritic_delay
                      )
           );

  e.set_receiver( *target );
  {# e.set_weight( wsyn_ ); #}
  e.set_weight( {{component_class.state_variable('wsyn').name}}_ );

  // use accessor functions (inherited from Connection< >) to obtain delay in
  // steps and rport
  e.set_delay( get_delay_steps() );
  e.set_rport( get_rport() );
  e();

  {# Kplus_ = Kplus_ * std::exp( ( t_lastspike_ - t_spike ) / tau_plus_ ) + 1.0; #}
  using std::exp;
  {% set on_event = component_class.regime('sole').on_event('presynaptic_spike') %}
  {{on_event.state_assignment('P').lhs}} =
    {{on_event.state_assignment('P').rhs}};

  {# t_lastspike_ = t_spike; #}
  {{component_class.state_variable('tlast_post').name}}_ =
                   {{component_class.state_variable('tlast_pre').name}};
}

template < typename targetidentifierT >
STDPConnection_{{component_name}}< targetidentifierT >::STDPConnection_{{component_name}}()
  : ConnectionBase()
  {#
  , wsyn_( 1.0 )
  , tau_plus_( 20.0 )
  , Wmax_( 100.0 )
  , Kplus_( 0.0 )
  , t_lastspike_( 0.0 )
  #}
{
}

template < typename targetidentifierT >
STDPConnection_{{component_name}}< targetidentifierT >::STDPConnection_{{component_name}}(
  const STDPConnection_{{component_name}}< targetidentifierT >& rhs )
  : ConnectionBase( rhs )
  {% for par in component_class.parameters %}
     {% if 'LTD' not in par.name %}
  , {{par.name}}_( rhs.{{par.name}}_ )
     {% endif %}
  {% endfor %}
  {#
  , weight_( rhs.wsyn_ )
  , tau_plus_( rhs.tau_plus_ )
  , Wmax_( rhs.Wmax_ )
  , Kplus_( rhs.Kplus_ )
  , t_lastspike_( rhs.t_lastspike_ )
  #}
{
}

template < typename targetidentifierT >
void
STDPConnection_{{component_name}}< targetidentifierT >::get_status( DictionaryDatum& d ) const
{
  {#
  def< double >( d, names::weight, weight_ );
  def< double >( d, names::tau_plus, tau_plus_ );
  def< double >( d, names::Wmax, Wmax_ );
  #}
  ConnectionBase::get_status( d );
  {% for par in component_class.parameters %}
     {% if 'LTD' not in par.name %}
  def< double >( d, names::{{par.name}}, {{par.name}}_ );
     {% endif %}
  {% endfor %}

  def< long >( d, names::size_of, sizeof( *this ) );
}

template < typename targetidentifierT >
void
STDPConnection_{{component_name}}< targetidentifierT >::set_status( const DictionaryDatum& d,
  ConnectorModel& cm )
{
  ConnectionBase::set_status( d, cm );
  {#
  updateValue< double >( d, names::weight, weight_ );
  updateValue< double >( d, names::tau_plus, tau_plus_ );
  updateValue< double >( d, names::Wmax, Wmax_ );
  #}
  {% for par in component_class.parameters %}
     {% if 'LTD' not in par.name %}
  updateValue< double >( d, names::{{par.name}}, {{par.name}}_ );
     {% endif %}
  {% endfor %}

  // check if weight_ and Wmax_ has the same sign
  if ( not( ( ( {{component_class.state_variable('wsyn').name}}_ >= 0 )
            - ( {{component_class.state_variable('wsyn').name}}_ <  0 )
            )
         == ( ( {{component_class.parameter('wmax').name}}_ >= 0 )
            - ( {{component_class.parameter('wmax').name}}_ <  0 )
            )
          )
      )
  {
    throw BadProperty( "Weight and Wmax must have same sign." );
  }
}

} // of namespace nest

#endif // of #ifndef STDP_CONNECTION_{{component_name | upper}}_H
